name: Commit Timestamp

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
      - opened
      - synchronize
      - reopened

jobs:
  commit-timestamp:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo code
        uses: actions/checkout@v4

      - name: Get timestamps
        run: |
          # For latest commit hash
          HASH=$(git rev-parse HEAD)
          # ISO 8601 Format
          TIMESTAMP=$(git show -s --format=%ci $HASH)
          # Extract date, time, and original offset
          DATE=$(echo $TIMESTAMP | cut -d' ' -f1)
          TIME=$(echo $TIMESTAMP | cut -d' ' -f2)
          # Manually set the offset to +05:30
          OFFSET="+05:30"
          # Combine timestamp with the new offset
          TIMESTAMP="${DATE} ${TIME} ${OFFSET}"
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "OFFSET=$OFFSET" >> $GITHUB_ENV

      - name: Check if commit is from merged PR
        id: check-merge
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.event.pull_request.merged }}" == "true" ]; then
            echo "MERGED=true" >> $GITHUB_ENV
          else
            echo "MERGED=false" >> $GITHUB_ENV
          fi

      - name: Add comment to PR if merged
        if: env.MERGED == 'true' && github.event_name == 'pull_request'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          DATE="${{ env.DATE }}"
          TIME="${{ env.TIME }}"
          # Create a Markdown table for the comment
          COMMENT="## Commit Timestamp\n\n| Date       | Time       | Offset |\n|------------|------------|--------|\n| $DATE | $TIME | $OFFSET |\n"
          gh pr comment $PR_NUMBER --body "$COMMENT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Git committer identity
        if: env.MERGED == 'true'
        run: |
          PR_AUTHOR_NAME="${{ github.event.pull_request.user.login }}"
          PR_AUTHOR_EMAIL="${PR_AUTHOR_NAME}@github.com"
          git config --local user.email "$PR_AUTHOR_EMAIL"
          git config --local user.name "$PR_AUTHOR_NAME"

      - name: Modify the commit message if the PR is merged
        if: env.MERGED == 'true'
        run: |
          # get the last commit message
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          # prepare the new message with timestamp
          NEW_MESSAGE="[${{ env.TIMESTAMP }}] ${LAST_COMMIT_MESSAGE}"
          # amend the commit message
          git commit --amend -m "$NEW_MESSAGE"
          git push --force
